#!/usr/bin/env python3
import math


def findDistance(x1, y1, x2, y2):
    return math.sqrt(abs(x2 - x1) ** 2 + abs(y2 - y1) ** 2)


def findNearest(res_pos, cur_pos):
    _min = 1000000
    _min_pos = (1000000, 1000000)
    f = open('distance', 'w'); f.write(''); f.close()
    for i in res_pos:
        f = open('distance', 'a')
        f.write(str(findDistance(i[0], i[1], cur_pos[0], cur_pos[1])) + '\n')
        f.close()
        if findDistance(i[0], i[1], cur_pos[0], cur_pos[1]) < _min:
            _min = findDistance(i[0], i[1], cur_pos[0], cur_pos[1])
            _min_pos = (i[0], i[1])
    return _min_pos


def analysisAndMove(cur_pos, nearest_pos):
    if cur_pos[0] < nearest_pos[0]:
        return 'MOVE RIGHT'
    if cur_pos[0] > nearest_pos[0]:
        return 'MOVE LEFT'
    if cur_pos[1] < nearest_pos[1]:
        return 'MOVE DOWN'
    if cur_pos[1] > nearest_pos[1]:
        return 'MOVE UP'



flag = 1
while flag == 1:
    x = input()
    if "HELLO" in x:
        print("I AM QUI\n")
    if "YOU ARE" in x:
        my_letter = x[-1]
        print("OK\n")
    if "MAZE" in x:
        maze = []
        while len(x) > 0:
            x = input()
            maze.append(x)

        resources_pos = []
        available_move = []
        for y in range(len(maze)):
            for x in range(len(maze[y])):
                if maze[y][x] == 'o' or maze[y][x] == '!':
                    resources_pos.append((x, y))
                if maze[y][x] == ' ':
                    available_move.append((x, y))
                if maze[y][x] == my_letter:
                    current_pos = (x, y)

        f = open('resources', 'w')
        f.write('')
        f.close()

        f = open('resources', 'a')
        f.write('Maze:\n')
        for i in maze:
            f.write(str(i) + '\n')
        f.write('Goal:\n')
        for i in resources_pos:
            f.write(str(i) + '\n')
        f.write('My position:\n')
        for i in current_pos:
            f.write(str(i) + '\n')
        f.write('Available move:\n')
        for i in available_move:
            f.write(str(i) + ' |')
        f.close()

        f = open('nearest', 'a')
        f.write(str(findNearest(resources_pos, current_pos)))
        f.close()

        nearest_resource = findNearest(resources_pos, current_pos)

        print(analysisAndMove(current_pos, nearest_resource) + '\n')
