#!/usr/bin/env python3
import math


def findDistance(x1, y1, x2, y2):
    return math.sqrt(abs(x2 - x1) ** 2 + abs(y2 - y1) ** 2)


def findNearest(res_pos, cur_pos):
    _min = 1000000
    _min_pos = (1000000, 1000000)
    for i in res_pos:
        if findDistance(i[0], i[1], cur_pos[0], cur_pos[1]) < _min:
            _min = findDistance(i[0], i[1], cur_pos[0], cur_pos[1])
            _min_pos = (i[0], i[1])
    return _min_pos


def analysisAndMove(cur_pos, nearest_pos):
    if cur_pos[0] < nearest_pos[0]:
        return 'MOVE RIGHT'
    if cur_pos[0] > nearest_pos[0]:
        return 'MOVE LEFT'
    if cur_pos[1] < nearest_pos[1]:
        return 'MOVE DOWN'
    if cur_pos[1] > nearest_pos[1]:
        return 'MOVE UP'


def findPath(current_pos, resource_pos, available_move):
    direction = [(-1, 0), (0, -1), (1, 0), (0, 1)]
    path = {}

    order = 1
    path[order] = []
    path[order].append(current_pos)

    while resource_pos[0] not in path[order]:
        f = open('path', 'a')
        f.write(str(path.items()))
        f.write(str(path[order]))
        f.write(str(resource_pos[0]))
        f.close()
        order += 1
        for i in direction:
            for j in path[order - 1]:
                if j in available_move:
                    temp_available_move = available_move.remove(j)
                else:
                    temp_available_move = available_move
                temp_pos = (j[0] + i[0], j[1] + i[1])
                if temp_pos in temp_available_move:
                    try:
                        path[order].append(temp_pos)
                    except:
                        path[order] = []
                        path[order].append(temp_pos)


while True:
    x = input()
    if 'HELLO' in x:
        print('I AM QUI\n')
    if 'YOU ARE' in x:
        my_letter = x[-1]
        print('OK\n')
    if 'MAZE' in x:
        maze = []
        while len(x) > 0:
            x = input()
            maze.append(x)

        normal_resource = []
        rare_resource = []
        available_move = []
        for y in range(len(maze)):
            for x in range(len(maze[y])):
                if maze[y][x] == 'o':
                    normal_resource.append((x, y))
                if maze[y][x] == '!':
                    rare_resource.append((x, y))
                if maze[y][x] == my_letter:
                    current_pos = (x, y)

        if len(rare_resource) > 0:
            nearest_resource = findNearest(rare_resource, current_pos)
        else:
            nearest_resource = findNearest(normal_resource, current_pos)
        findPath(current_pos, normal_resource, available_move)

        print(analysisAndMove(current_pos, nearest_resource) + '\n')
