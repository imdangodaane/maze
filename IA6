#!/usr/bin/env python3


def move(start, goal):
    # compare current position to next position to send next MOVE
    if start[0] < goal[0]: return 'MOVE RIGHT\n'
    if start[0] > goal[0]: return 'MOVE LEFT\n'
    if start[1] < goal[1]: return 'MOVE DOWN\n'
    if start[1] > goal[1]: return 'MOVE UP\n'


def findPath(start, goal, available_move):
    direction = [(-1, 0), (1, 0), (0, -1), (0, 1)]

    path = []
    level_search = {}
    trace_back = {}
    temp_available_move = list(available_move)

    level = 1
    level_search[level] = set()
    level_search[level].add(goal)

    while start not in level_search[level]:
        level += 1
        level_search[level] = set()
        for pos in level_search[level - 1]:
            trace_back[pos] = set()
            if pos in temp_available_move:
                temp_available_move.remove(pos)
            for d in direction:
                temp_pos = (pos[0] + d[0], pos[1] + d[1])
                if temp_pos in temp_available_move:
                    level_search[level].add(temp_pos)
                    trace_back[pos].add(temp_pos)

    search_key = start

    while search_key != goal:
        for key, values in trace_back.items():
            for value in values:
                if value == search_key:
                    search_key = key
                    path.append(search_key)
                    break
    return (path, len(path))


def guideToInstruction(cur_pos, guide):
    instruction = []
    for i in guide:
        instruction.append(move(cur_pos, i))
        cur_pos = i
    return instruction


instruction = []


while True:
    x = input()
    if 'HELLO' in x:
        print('I AM QUI\n')
    if 'YOU ARE' in x:
        my_letter = x[-1]
        print('OK\n')
    if 'MAZE' in x:
        maze = []
        while len(x) > 0:
            x = input()
            maze.append(x)

        normal_resource = []
        rare_resource = []
        available_move = []

        for y in range(len(maze)):
            for x in range(len(maze[y])):
                if maze[y][x] != '#':
                    available_move.append((x, y))
                if maze[y][x] == 'o':
                    normal_resource.append((x, y))
                if maze[y][x] == '!':
                    rare_resource.append((x, y))
                if maze[y][x] == my_letter:
                    current_pos = (x, y)

        if len(instruction) > 0:
            print(instruction[0])
            f = open('instruction_2', 'a')
            f.write(str(instruction) + '\n')
            f.close()
            instruction.remove(instruction[0])
        else:
            _min = [[], 1000000]
            for i in normal_resource:
                temp = findPath(current_pos, i, available_move)
                if temp[1] < _min[1]:
                    _min[0] = temp[0]
                    _min[1] = temp[1]
            guide = _min[0]
            instruction = guideToInstruction(current_pos, guide)
            f = open('instruction', 'a')
            f.write(str(instruction) + '\n')
            f.close()
            print(instruction[0])
            instruction.remove(instruction[0])
